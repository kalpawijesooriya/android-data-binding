// Merge of
// https://github.com/mgouline/android-samples/blob/master/jacoco/app/build.gradle
// and https://github.com/pushtorefresh/storio/blob/master/gradle/jacoco-android.gradle

jacoco {
    // See https://github.com/jacoco/jacoco/releases
    toolVersion = '0.7.5.201505241946'
}

project.afterEvaluate {
    // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
    task "jacocoTestReport"(type: JacocoReport, dependsOn: "test") {
        group = 'Reporting'
        description = "Generate Jacoco coverage reports for the debug build."

        classDirectories = fileTree(
                dir: "${project.buildDir}/intermediates/classes/debug",
                excludes: ['**/R.class',
                           '**/R$*.class',
                           '**/*$ViewInjector*.*',
                           '**/*$ViewBinder*.*',
                           '**/BuildConfig.*',
                           '**/*Fragment*.*',
                           '**/*Activity*.*',
                           '**/*ViewHolder*.*',
                           '**/Manifest*.*',
                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                           '**/*Module.*', // Modules for Dagger.
                           '**/*Dagger*.*', // Dagger auto-generated code.
                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                           '**/*_Provide*Factory*.*'] // Dagger auto-generated code.
        )

        def coverageSourceDirs = [
                'src/main/java',
        ]
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${project.buildDir}/jacoco/jacocoTestReport.exec")

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    build.dependsOn "jacocoTestReport"
}